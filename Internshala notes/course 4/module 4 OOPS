const user={
    name:{
        first:"alok",
        last:"Jha"
    },
    property:function (){
        console.log("this is a func");
    }
}

// user["name"]["first"]="keshav"; changed the value at 
// nested loop 

// user.newFunc=function (){
//     console.log("this is an added function");
// } you can add new function into an object as well 


// console.log(typeof {})
// console.log(user);

// abstraction exmple

// class Animal{
//      sound(){
//          throw new Error("Method sound() should be overriden");  
        // we throw error cause the dog subclass could 
        // forget to call the sound() and since we dont have
        // abstract keyword here. it wont throw error otherwise.
        
//      }
// }

// class Dog extends Animal{
   
//      sound(){
//         console.log("dog barks");
//     }
    
// }

// const  d1=new Dog();
// d1.sound();


function BankAccount(owner, balance) {
  let _balance = balance; // private variable

  this.owner = owner;

  this.deposit = function(amount) {
    _balance += amount;
    console.log(`Deposited ${amount}.`);
  };

  this.getBalance = function() {
    return _balance; // controlled access
  };
}

const account = new BankAccount("Harshita", 1000);
account.deposit(500);         // Deposited 500
console.log(account.getBalance()); // 1500
console.log(account._balance); 



class Customer{
    constructor(name,email){
        this.email=email; 
        this.name=name;
            }
// constructor are special functions that executes automatically
// when we want to create an object or instance using new 
// keyword 

// this.name creates a local variable inside the class by itself
// we don't have to explicitly create it and let name (not needed)
    
    get info(){
        return this.name;
    }

// we use get to make info like a property of object and 
// not like a function hence (customer1.info) without brackets
// this is helpful when we want complex functions to look 
// like an object properties.
    
    details(){
        console.log(`this is ${this.name} and emai is ${this.email}`)
    }
}

// const customer1=new Customer("alok","alokjha@gmail");
// const customer2=new Customer("keshav","keshav@gmail");

// console.log(customer1);
// console.log(customer1.info);
// console.log(customer2);


class Vip extends Customer{
    
    constructor(name,email,viplevel){
        super(name,email);
        this.viplevel=viplevel;
    }
    
    
    UpdateViplevel(level){
      this.viplevel=level;
      return`vip level is ${this.viplevel}`;
    //   if I dont return and just console.log here, it will 
    // return the 
    }
}

const v1=new Vip("alok","alok@gmail",1);



// console.log(v1);
// console.log(v1.UpdateViplevel(3))











